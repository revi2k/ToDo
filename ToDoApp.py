# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ToDoApp.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from calendar import c, day_abbr
from PyQt5 import QtCore, QtGui, QtWidgets
from datetime import date
import sys
from PyQt5.QtWidgets import * 
from PyQt5.QtGui import * 
from PyQt5.QtCore import * 

today = date.today()
class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.InsertButton = QtWidgets.QPushButton(self.centralwidget)
        self.InsertButton.setGeometry(QtCore.QRect(200, 50, 161, 23))
        self.InsertButton.setObjectName("InsertButton")
        self.ListTasks = QtWidgets.QListWidget(self.centralwidget)
        self.ListTasks.setGeometry(QtCore.QRect(400, 10, 391, 471))
        self.ListTasks.setObjectName("ListTasks")
        self.InsertTask = QtWidgets.QLineEdit(self.centralwidget)
        self.InsertTask.setGeometry(QtCore.QRect(10, 10, 351, 31))
        font = QtGui.QFont()
        font.setFamily("Calibri Light")
        font.setPointSize(12)
        self.InsertTask.setFont(font)
        self.InsertTask.setObjectName("InsertTask")
        self.widget = QtWidgets.QWidget(self.centralwidget)
        self.widget.setGeometry(QtCore.QRect(450, 490, 291, 20))
        self.widget.setObjectName("widget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.widget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.ToDoCheckBox = QtWidgets.QCheckBox(self.widget)
        self.ToDoCheckBox.setObjectName("ToDoCheckBox")
        self.horizontalLayout.addWidget(self.ToDoCheckBox)
        self.InProgressCheckBox = QtWidgets.QCheckBox(self.widget)
        self.InProgressCheckBox.setObjectName("InProgressCheckBox")
        self.horizontalLayout.addWidget(self.InProgressCheckBox)
        self.DoneCheckBox = QtWidgets.QCheckBox(self.widget)
        self.DoneCheckBox.setObjectName("DoneCheckBox")
        self.horizontalLayout.addWidget(self.DoneCheckBox)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        def error(errorType): # error function, popup window with error type
                msg = QMessageBox()
                msg.setWindowTitle("Error")
                msg.setText(errorType)
                x = msg.exec_()
                return x    

        class Task:
            def __init__(self, task, status):
                self.task = task
                self.status = status
            def ret_status(self):
                return self.status
            def status_to_do(self):
                self.status = "To do"
            def status_in_progress(self):
                self.status = "In progress"
            def status_is_done(self):
                self.status = "Done"

        self.tasks = []
        self.deleted_tasks = []
        def strike_out_font():
            if self.DoneCheckBox.isChecked() == True:
                font = self.ListTasks.currentItem().font()
                font.setStrikeOut(True)
                self.ListTasks.currentItem().setFont(font)

        def insertTask():
            try:
                task = self.InsertTask.text()
                for t in self.tasks:
                    if t.task == task:
                        if t.task not in self.deleted_tasks:
                            raise Exception("Duplicated task.")
                self.tasks.append(Task(task,'To do'))
                self.ListTasks.addItem(QListWidgetItem(self.tasks[len(self.tasks)-1].task))
            except:
                error("Duplicated task!")

        def check_status():
            current_row = self.ListTasks.currentRow() # starting from 0
            if self.tasks[current_row].status == 'Done':
                self.DoneCheckBox.setChecked(True)
                self.ToDoCheckBox.setChecked(True)
                self.InProgressCheckBox.setChecked(True)
                self.deleted_tasks.append(self.tasks[current_row].task)
            if self.tasks[current_row].status == 'In progress':
                self.ToDoCheckBox.setChecked(True)
                self.InProgressCheckBox.setChecked(True)
                self.DoneCheckBox.setChecked(False)
            if self.tasks[current_row].status == 'To do':
                self.ToDoCheckBox.setChecked(True)
                self.InProgressCheckBox.setChecked(False)
                self.DoneCheckBox.setChecked(False)
        def set_status():
            current_row = self.ListTasks.currentRow() # starting from 0
            if self.ToDoCheckBox.isChecked()==True and self.InProgressCheckBox.isChecked()==False and self.DoneCheckBox.isChecked()==False:
                self.tasks[current_row].status_to_do()
            elif self.InProgressCheckBox.isChecked()==True and self.ToDoCheckBox.isChecked()==True and self.DoneCheckBox.isChecked()==False:
                self.tasks[current_row].status_in_progress()
            elif self.DoneCheckBox.isChecked()==True:
                self.tasks[current_row].status_is_done()


        self.ListTasks.currentItemChanged.connect(check_status)
        
        self.DoneCheckBox.stateChanged.connect(set_status)
        self.DoneCheckBox.stateChanged.connect(strike_out_font)
        self.InProgressCheckBox.stateChanged.connect(set_status)
        self.ToDoCheckBox.stateChanged.connect(set_status)
        self.InsertButton.clicked.connect(insertTask)


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "ToDo"))
        self.InsertButton.setText(_translate("MainWindow", "Insert"))
        self.InsertTask.setPlaceholderText(_translate("MainWindow", "Insert task..."))
        self.ToDoCheckBox.setText(_translate("MainWindow", "To do"))
        self.InProgressCheckBox.setText(_translate("MainWindow", "In progress"))
        self.DoneCheckBox.setText(_translate("MainWindow", "Done"))

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    app.setStyle('Fusion')
    MainWindow.show()
    sys.exit(app.exec_())